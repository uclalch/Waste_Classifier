# -*- coding: utf-8 -*-
"""CHAOHAO_LI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nrSMmXiJp5gg70iLspOc47KzDJanKc3o

# UCLA Fall 2019 ECEM202A/CSM213A Assignment 2
## Due: December 13, 11:59PM
Instructions: 
* There will be no deadline extension.
* Please make a copy of this [Google Colab](https://colab.research.google.com/) notebook and put your code and answer within it.
* You can use any Python package. You may need to install it if Google Colab doesn't already have it.
* You have to submit this homework via Gradescope. You have already been enrolled there using the official roster. In the PDF that you upload on Gradescope, please start the answer to every problem on a new page and make sure to assign pages to each of problem/subproblem correctly within Gradescope.
---

### Your Name:
Chaohao Li

### URL:
 
https://colab.research.google.com/drive/1nrSMmXiJp5gg70iLspOc47KzDJanKc3o
---

## Problem #1: Topic Deep Dive [15 points]

Pick one of the topics from the list below, and based on web research write a 1-2 page (500-1000 words; excluding references and figures) essay / survey on the topic. Adapt your presentation to the nature of the topic with the goal of informing the reader about the current state of technology.

* Ultra-low-latency networking and its applications
* Time synchronization and latency in financial markets
* Security vulnerabilities and mitigation in NTP

### Answer:

**Ultra-Low-Latency Networking and its Applications**


Chaohao Li
705430930

The definition of ultra-low-latency networking is “a computer network that is optimized to process a very high volume of data packets with an extraordinarily low latency (delay)” [1]. As you might have known, nowadays we are already using very robust networks that have very fast data transferring speed. With these configurations, we are able to download videos that are numbers of giga bytes within an hour, or even faster. It seems that the ultra-speed network now can ready meet all our requirements of using the internet. However, there are still a lot of applications that not only require the speed of the internet, but also need one more factor to be their prerequisite, the low-latency property. The best part of low-latency networking is that it can support real-time access and respond to rapidly changing data. 

What kind of applications require low-latency networking? There are uses like high frequency trading (HFT), emergency response medical systems, military applications and stock exchanges. High frequency financials are achieved by using well-designed algorithm and are also entirely automated. In order to compete with other firms or individuals, one needs to act fast enough in respond to a sudden change in the market. Even though these works can be done using ordinary networks, they absolutely can be better improved by decrease the latency of networking. So far, “ultra” low latency is measured in the hundreds of nanoseconds with only speeds under 1 millisecond qualifying as ultra-low [1]. In the future, the standard will be pushed to another level.

5G, a term that is being discussing all over the world, is most likely to achieve lower latency in the near future. One of the exciting possibilities it can offer is the vehicle-to-vehicle and vehicle-to-everything connectivity. Instead of only having static electronic devices connected with each other through internet (IoT), people make moving objects to be able to connect with each other (V2V), so that they can transmit data and issue commands among each other. This can only be realized with the presence of ultra-low-latency networking, which will make these vehicles extraordinarily reliable and safe on the road. Also, one important thing that comes with the low latency promise in the V2V market is the “edge computing”. This edge allows lightning-fast respond time with 5G’s promise of ultra-low latency. This isn’t the only one novelty of 5G. There are more related benefits like factory robots and mobile gaming.

Right now, companies like Google, At&t and Apple, are working on constructing their 5G service. However, 5G could be hard to be achieved since it needs very dense base stations to build its network [2]. In countries like America, it could be hard to build very dense base stations throughout the country in a low cost. This could really be the issue for these companies to think when they want to extend their 5G services. Does this mean that 5G is not possible to be realized? In fact, in some cities of China, 5G service has already been established, with huge amounts of users experiencing it. Speed-wide, 5G is already more than 10 times faster than 4G, which basically allows people to download data instantaneously. From a professional perspective, as I mentioned above, the largest beneficiary in the revolution is still robotics. This ultra-low-latency characteristic makes it possible for machines to work endlessly with extremely high accuracy. As a result, a lot of work and facilities can be finished with higher qualities and people can save more time for their other jobs. The ultra-low-latency design is indeed a revolution of the network, and in the future, it will bring more and more opportunities to the society, improving our life and thinking from a whole new perspective.

Reference
[1] What is Ultra Low Latency? Written by Informatica. Retrieved from https://www.informatica.com/services-and-training/glossary-of-terms/ultra-low-latency-definition.html

[2] How 5G aims to end network latency. Written by Stephen Shankland. Retrieved from https://www.cnet.com/news/how-5g-aims-to-end-network-latency-response-time/

---

## Problem #2: In the News [5 points]

Research the web to find an incident that resulted in loss of service or of life or property, and whose cause related to the computing system having bad information about time. Your example must not be one that are already in the lecture slides. In a few sentences (max 200 words) describe the incident(s), the cause, and possible mitigation.

### Answer:

This $64M hack was very famous on the Ethereum history. And as you might have noticed, it was caused by Buterin trying to turn back the clock of the system using a software, which produced parallel systems. Some customers as a result, were still using the old system at that time. The stolen currency is totally the result of messing up with the system clock.

How a $64M hack changed the fate of Ethereum, Bitcoin's closest competitor. Written by Johnathan Ore. Retrieved from https://www.cbc.ca/news/technology/ethereum-hack-blockchain-fork-bitcoin-1.3719009

---

## Problem #3: Short Questions on Time [5 x 2 = 10 points]

Note: The following will be graded on a binary basis with either zero score or full credit being given.

**a. Name at least two factors that fundamentally limit how precisely one can synchronize two computers talking over a communication link. Expain.**

Answer: As far as I am concerned, there will be unpredictable communication delay when we are tring to synchronize two computers. Also, we should realize that there will always be clock skew. It could be understood in a way that the clock can only tell the time relatively to some time fram. It can be pretty accurate because we have a slightly larger tolerance in our device. However, more tolerance is corresponding to larger error or delay. That's why I think Clock Skew is also one factor that limit the precision of synchronizing two computers.

**b. With current technology how precisely can one synchronize two computers connected via an ethernet cable>? Explain your answer and support any assumptions via references.**

Answer: Based on the Wikipedia (PTP), the accuracy of this ethernet can go between clock and UTC, which is in nanoseconds.

Precision Time Protocol. From Wikipedia. Retrieved from https://en.wikipedia.org/wiki/Precision_Time_Protocol

**c. There is considerable ambiguity in jargon relating to clocks, and it does not helpo that different research communities use different terms. One relevant standard is Internet RFC 2330 (Framework for IP Performance Metrics). Read Section 10 of this RFC, and describe what is the difference between the following terms: offset, relative offset, skew, relative skew, and drift.**

Answer: 
"Offset" at a particular time, is the difference between the time reported by the clock and the True time as defined by UTC.

---


"Relative offset" is a term used to disambiguate between the use of the terms to compare two clocks versus the use of the terms to compare to true time.

---


"Skew" of a clock is described as at a particular moment, the frequency difference (first derivative of its offset with respect to true time) between the clock and true time.

---

"Relative Skew" similarly is the skew of the use of the terms compare to that of true time.

---

"Drift" is a quantity that refers to the second derivative of the clock's offset with respect to true time, generally being non-zero.

**d. What is the process of minimizing the difference between the frequencies of two clocks called?**

Answer: It is called "Frequency Synchronization".

***e. Allowing software processes running on a computer to measure passage of time very precisely can lead to security problems, to the extent that in some computer systems the time made visible to an application is made deliberately less precise. Can you suggest one security vulnerability that occurs because time intervals can be measured too well? Provide reference to any paper that you consult.***

Answer: One thing I could possibly think about, which is related to the computer virus, is that if someone wants to attack a computer, he or she may use this accurate time information to attack the computer. If the time intervel is too clear to the hacker, multiple attacks like jamming the memory and adding delay to the computations could happen. What's wore, the hacker may create another time frame that is parallel to the original one, and steal some of the tasks from the computer system, which is also bad.

---

## Problem #4: Analyzing Quality of Clocks [4 x 5 = 20 points]

In the lecture we saw how clocks drift differently to each other. Assume we have two crystal oscillators both running at a nominal frequency of 8 MHz. We connect each crystal to a counter, and collect in regular intervals the value of the counter. The frequency with which we collect the values is precisely 1Hz (you can assume that this is generated by an atomic clock). 

Answer the following questions by using clock measurement data in the CSV file at https://drive.google.com/file/d/1AIkNxEWXCqGCEO6hPGHlkU5lHM5Sk6Dz. The columns are: atomic time [seconds], temperature, count of crystal 1, count of crystal 2.

All your code should be in the code blocks below and be runnable.

#### a. Calculate and plot the Allan variance for each crystal.

#### Answer:
"""

# Code for part a
import csv
import requests

CSV = 'https://drive.google.com/file/d/1AIkNxEWXCqGCEO6hPGHlkU5lHM5Sk6Dz'
with requests.Session() as s:
  download = s.get(CSV)
  decoded = download.content.decode('utf-8')
  file = csv.reader(decoded.splitlines(), delimiter = ',')
  data = list(file)
  for row in data:
    print(row)

## I wish I had this file successfully input. So I can work on the following part.

"""#### b. Extract the temperature vs. frequency curve for each crystal and plot it.

#### Answer:
"""

# Code for part b

"""#### c. By using the T vs. f curve from the part (b), create a TCXO and compensate the frequency of each crystal.

#### Answer:
"""

# Code for part c

"""#### d. Plot a graph that shows the error without and with compensation, compared to what an atomic clock would have. Calculate the Allan variance of the compensated crystal. Do you notice something?

#### Answer:
"""

# Code for part d

"""---

## Problem #5: Smarter Sampling [10 points]

You have a sensor that measured a single over a 10 second time interval. We are given that the physical process generates a sine wave $a \cdot sin(2 \cdot \pi \cdot f \cdot t + \phi)$ of some unknown amplitude $a$, frequence $f$, and phase $\phi$. In light of this knowledge, the software saves on sampling by only making 8 measurements over the 10 second interval based on the idea that there are only three unknown parameters in a sine wave, and thus only a minimum of three samples are needed (and any more only serve to make tbe estimate more robust0. The measurements are as below (time is in seconds from the start of the interval). 

Reconstruct the measured signal waveform over the 10s interval by estimating the amplitude, frequency (in Hz), and phase (in radians). 

Think about both scalability and accuracy of your solution.

| t (sec) | v |
|----- | --- |
| 5.71403 | 0.347064 |
| 4.28889 | -0.396854 |
| 5.78091 | -7.29133e-05 |
| 2.06098 | 0.380579 |
| 8.13321 | 0.272391 |
| 8.23589 | -0.304111 |
| 6.53473 | 0.265354 |
| 1.6023 | 0.131908 |
"""

measurements = [(5.71403,0.347064), (4.28889, -0.396854), (5.78091, -7.29133e-05), 
(2.06098, 0.380579), (8.13321, 0.272391), (8.23589, -0.304111), (6.53473, 0.265354), (1.6023, 0.131908)]
import numpy as np
import matplotlib.pyplot as plt 
# write the function below, returning a tuple (amplitude, frequency, phase)
def reconstruct_waveform(data):
  # replace the body with your code
  t = []
  V = []
  data.sort()
  for a,b in data:
    t.append(a)
    V.append(b)

  amp = (max(V) - min(V))/2
  ph_index = V.index(min(V,key = abs))
  phase = t[ph_index]
  freq = 1/((t[V.index(max(V))] - t[V.index(min(V))]) * 2)

  return (amp,freq,phase)
reconstruct_waveform(measurements)

"""This method is not that accurate, since it is only taking the extreme values for calculation. However, for cases that the samples taken perfectly match these extreme points, we will get nearly the correct results."""